/** 
 * @author  Artium Nihamkin, artium@nihamkin.com
 * @date    09/2018
 * @version 1.2
 *  
 * @brief This is an AGS module that makes it possible to add a hinting
 *        system to a game. Upon user action, a shape will be drawn
 *        around each enabled hotspot in the room.
 *  
 * @section LICENSE
 *
 * The MIT License (MIT)
 * Copyright © 2018 Artium Nihamkin, artium@nihamkin.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @section DESCRIPTION 
 *
 * Please refer the ash file for complete description.
 */


// C O N S T A N T S
////////////////////

/** 
  * The the highest ID of a hotspot in the room. This is required because a 
  * static allocation for data in this module.
  */
#define MAX_ROOM_HOTSPOSTS_SUPPORTED 50

/** 
  * Which shape to use for hints. Can be circle, rectangle or mixed as 
  * define by the HintShapeType enum.
  * Mixed will a separate decision for each hotspot whether to use 
  * circle or to use rectangle. The decision will be based on the ratio of 
  * height to width defined separately.
  */
#define HINT_SHAPE_TO_USE eHintMixed

/**
  * If eHintMixed is selected, this will be the ratio used for deciding
  * the shape.
  * If the width/height or height/width of the area is larger than this
  * defined value, then a rectangle will be used, otherwise, a circle. 
  */
#define HINT_SHAPE_MIXED_RATIO 1.5

/**
 * The width of the highlight shape
 */
#define BORDER_WIDTH 1

/** 
  * The color of the highlight shape
  */
#define BORDER_COLOR Game.GetColorFromRGB(Random(255), Random(255), Random(255))

/**
 * To prevent highlights that are too small, it is possible to define minimal
 * size. If the shape is smaller that that size, it's size will be increased.
 * For circles, size is the diameter.
 * For rectangles, size is the edge's length (each dimension increased separately)
 */
#define MINIMAL_SHAPE_SIZE 20

/**
 * If this parameter set to true, the user of the module is responsible for
 * calling the module's interface functions for calculating and displaying hints.
 */
#define USE_CUSTOM_HANDLING false

/**
 * Used only when USE_CUSTOM_HANDLING is set to false.
 * When this key is held down, the overlay is displayed.
 */
#define KEY_FOR_DISPLAYING_HINTS eKeySpace

// T Y P E S
////////////

struct HotspotExtendedDataType
{  
  bool initialised;
  int boundRight;
  int boundLeft;
  int boundTop;
  int boundBottom;
};


enum HintShapeType
{
   eHintCircle,
   eHintRectangle, 
   eHintMixed
};

// I N T E R N A L  D A T A
////////////////////////////

DynamicSprite* sprite;
Overlay* overlay;

HotspotExtendedDataType hotspotsExtData[MAX_ROOM_HOTSPOSTS_SUPPORTED];
bool hintsEnabled = true;

bool lastPassCalculated = false;

bool gamePausedByModule = false;

// I N T E R N A L  F U N C T I O N S
/////////////////////////////////////

/**
 * This is an internal method. It draws a rectangle around the hotspot.
 * It must be run in the context of the CalculateHintsForRoom after 
 * hotspotsExtData was calculated.
 * @surface The surface on which to draw the higlight.
 * @hotspotID The id of the hotspot to draw a rectangle for.
 */
function DrawRectangle(DrawingSurface* surface,  int hotspotID)
{
  int h = hotspotsExtData[hotspotID].boundBottom - hotspotsExtData[hotspotID].boundTop;
  int w = hotspotsExtData[hotspotID].boundRight - hotspotsExtData[hotspotID].boundLeft;
  
  int left   = hotspotsExtData[hotspotID].boundLeft;
  int right  = hotspotsExtData[hotspotID].boundRight;
  int top    = hotspotsExtData[hotspotID].boundTop;
  int bottom = hotspotsExtData[hotspotID].boundBottom;
  
  // Increase edges' length if too small
  if (h < MINIMAL_SHAPE_SIZE) {
    top    -= (MINIMAL_SHAPE_SIZE - h) / 2;
    bottom += (MINIMAL_SHAPE_SIZE - h) / 2;
    h = MINIMAL_SHAPE_SIZE;
    
  }

  if (w < MINIMAL_SHAPE_SIZE) {
    left  -= (MINIMAL_SHAPE_SIZE - w) / 2;
    right += (MINIMAL_SHAPE_SIZE - w) / 2;
    w = MINIMAL_SHAPE_SIZE;
  }

  // Draw clockwise
  surface.DrawingColor = BORDER_COLOR;
  
  // Top
  surface.DrawLine(
    left,     top,  
    right,    top, 
    BORDER_WIDTH);
  
  // Right
  surface.DrawLine(
    right,     top,  
    right    , bottom, 
    BORDER_WIDTH);
    
  // Bottom
  surface.DrawLine(
    right,     bottom,  
    left,      bottom, 
    BORDER_WIDTH);
    
  // Left
  surface.DrawLine(
    left,     bottom,  
    left    , top, 
    BORDER_WIDTH);
}

/**
 * This is an internal method. It draws a rectangle around the hotspot.
 * It must be run in the context of the CalculateHintsForRoom after 
 * hotspotsExtData was calculated.
 * @surface The surface on which to draw the higlight.
 * @hotspotID The id of the hotspot to draw a circle for.
 */
function DrawCircle(DrawingSurface* surface,  int hotspotID)
{
  int h = hotspotsExtData[hotspotID].boundBottom - hotspotsExtData[hotspotID].boundTop;
  int w = hotspotsExtData[hotspotID].boundRight - hotspotsExtData[hotspotID].boundLeft;
  
  int radius;
  
  if (w > h) {
    radius = w / 2;
  } else {
    radius = h / 2;
  }
  
  if (2 * radius < MINIMAL_SHAPE_SIZE) {
    radius = MINIMAL_SHAPE_SIZE / 2;
  }
  
  // Prepare the drawing of the highlight on a separate sprite.
  
  // Sprite big enough to draw a circle of that radius
  DynamicSprite* tempSprite = DynamicSprite.Create(2*radius + 1, 2*radius + 1, true);
  DrawingSurface* tempSurface = tempSprite.GetDrawingSurface();
      
  tempSurface.DrawingColor = BORDER_COLOR;
  tempSurface.DrawCircle(radius,  radius,  radius);
  tempSurface.DrawingColor = COLOR_TRANSPARENT;
  tempSurface.DrawCircle(radius,  radius,  radius - BORDER_WIDTH);
  tempSurface.Release();
  
  // Draw the prepared sprite onto the surface that contains all the highlights.
  int centerX = hotspotsExtData[hotspotID].boundLeft + w / 2;
  int centerY = hotspotsExtData[hotspotID].boundTop  + h / 2;
  surface.DrawImage(
    centerX - radius, 
    centerY - radius, 
    tempSprite.Graphic,  true);
    
  tempSprite.Delete();
}

// F U N C T I O N S
/////////////////////
static function HintsHighlighter::CalculateHintsForRoom()
{
  for(int i = 0; i < MAX_ROOM_HOTSPOSTS_SUPPORTED; i++)
  {
      hotspotsExtData[i].boundBottom = 0;
      hotspotsExtData[i].boundTop    = System.ScreenHeight;
      hotspotsExtData[i].boundRight  = 0;
      hotspotsExtData[i].boundLeft   = System.ScreenWidth;
      hotspotsExtData[i].initialised = false;
  }
    
  // Precalculate the bounding rectangle of each visible hotspot
  for(int x = Random(1); x < System.ScreenWidth; x+=2)
  {
    for(int y = Random(1); y < System.ScreenHeight; y+=2)
    {
      // Please notice that x,y are screen coordinares
      // We simply ignore hotspots that are not currently visible.
      Hotspot *h = Hotspot.GetAtScreenXY(x, y);
      
      if ( h != hotspot[0] && h.Enabled)
      {
        hotspotsExtData[h.ID].initialised = true;
       
        // y coordinate is 0 at the top and increasing towards the buttom
        if(hotspotsExtData[h.ID].boundBottom < y) {
          hotspotsExtData[h.ID].boundBottom = y;
        }

        if(hotspotsExtData[h.ID].boundTop > y) {
          hotspotsExtData[h.ID].boundTop = y;
        }
        
        if(hotspotsExtData[h.ID].boundLeft > x) {
          hotspotsExtData[h.ID].boundLeft = x;
        }

        if(hotspotsExtData[h.ID].boundRight < x) {
          hotspotsExtData[h.ID].boundRight = x;
        }
      }
    }
  }
  
  // Construct the sprite that will later be used as overlay of all the hints
  sprite = DynamicSprite.Create(System.ScreenWidth, System.ScreenHeight,  true);
  DrawingSurface* surface = sprite.GetDrawingSurface();
  
  for(int i = 0; i < MAX_ROOM_HOTSPOSTS_SUPPORTED; i++)
  {
    if (hotspotsExtData[i].initialised)
    {
      if (HINT_SHAPE_TO_USE == eHintRectangle) {
        DrawRectangle(surface,  i);
      } else if (HINT_SHAPE_TO_USE == eHintCircle) {
        DrawCircle(surface,  i);
      } else if (HINT_SHAPE_TO_USE == eHintMixed) {
        
        float h = IntToFloat(hotspotsExtData[i].boundBottom - hotspotsExtData[i].boundTop);
        float w = IntToFloat(hotspotsExtData[i].boundRight  - hotspotsExtData[i].boundLeft);
		if (h == 0.0) h = 1.0;
        if (w == 0.0) w = 1.0;
        
        if (h/w > HINT_SHAPE_MIXED_RATIO || w/h > HINT_SHAPE_MIXED_RATIO) {
          DrawRectangle(surface,  i);
        } else {
          DrawCircle(surface,  i);
        }
        
      } else {
        AbortGame("Invalid value for HINT_SHAPE_TO_USE");
      }
    }
  }  
  
  surface.Release();
}

static function HintsHighlighter::DisplayHints()
{
  // Sprite is null before the first calculation
  if (sprite)
  {
    if (hintsEnabled)
      {
      // Calling DisplayHints repeatedly must not leak resources
      if (overlay != null && overlay.Valid  ) {
        overlay.Remove();
      }
      
      overlay = Overlay.CreateGraphical(0, 0, sprite.Graphic,  true);
    }
  }
}
  
static function HintsHighlighter::HideHints()
{
  if (overlay != null && overlay.Valid)
  {
    overlay.Remove();
  }
}


static function HintsHighlighter::EnableHints()
{
   hintsEnabled = true;
}


static function HintsHighlighter::DisableHints()
{
  HintsHighlighter.HideHints();
  hintsEnabled = false;
}


function repeatedly_execute()
{
  if (USE_CUSTOM_HANDLING == false) {
    
    // Calculate hints once, when the button is pressed. If overlay is already displayed, do not recalculate.
    if (IsKeyPressed(KEY_FOR_DISPLAYING_HINTS)) {

      if (lastPassCalculated == false) {
        HintsHighlighter.CalculateHintsForRoom();
        lastPassCalculated =true;
      }
      
      HintsHighlighter.DisplayHints();
      
      if (IsGamePaused() == false) {
        gamePausedByModule = true;
        PauseGame();
      }
    } else {
      lastPassCalculated = false;
      if(gamePausedByModule) {
        gamePausedByModule = false;
        UnPauseGame();
      }
      HintsHighlighter.HideHints();
    }
  }
}
